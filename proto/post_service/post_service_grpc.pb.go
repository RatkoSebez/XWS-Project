// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package post_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	CreatePost(ctx context.Context, in *MakePostPlusEmail, opts ...grpc.CallOption) (*Post, error)
	SavePhoto(ctx context.Context, in *PhotoMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	Comment(ctx context.Context, in *NewComment, opts ...grpc.CallOption) (*Post, error)
	MakeReaction(ctx context.Context, in *NewReaction, opts ...grpc.CallOption) (*Post, error)
	FollowingPosts(ctx context.Context, in *GetListOfFollowing, opts ...grpc.CallOption) (*PostList, error)
	GetUserPosts(ctx context.Context, in *UserMailMessage, opts ...grpc.CallOption) (*PostList, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) CreatePost(ctx context.Context, in *MakePostPlusEmail, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/post.PostService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) SavePhoto(ctx context.Context, in *PhotoMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/post.PostService/SavePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) Comment(ctx context.Context, in *NewComment, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/post.PostService/Comment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) MakeReaction(ctx context.Context, in *NewReaction, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/post.PostService/MakeReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) FollowingPosts(ctx context.Context, in *GetListOfFollowing, opts ...grpc.CallOption) (*PostList, error) {
	out := new(PostList)
	err := c.cc.Invoke(ctx, "/post.PostService/FollowingPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetUserPosts(ctx context.Context, in *UserMailMessage, opts ...grpc.CallOption) (*PostList, error) {
	out := new(PostList)
	err := c.cc.Invoke(ctx, "/post.PostService/GetUserPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility
type PostServiceServer interface {
	CreatePost(context.Context, *MakePostPlusEmail) (*Post, error)
	SavePhoto(context.Context, *PhotoMessage) (*EmptyMessage, error)
	Comment(context.Context, *NewComment) (*Post, error)
	MakeReaction(context.Context, *NewReaction) (*Post, error)
	FollowingPosts(context.Context, *GetListOfFollowing) (*PostList, error)
	GetUserPosts(context.Context, *UserMailMessage) (*PostList, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (*UnimplementedPostServiceServer) CreatePost(context.Context, *MakePostPlusEmail) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (*UnimplementedPostServiceServer) SavePhoto(context.Context, *PhotoMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePhoto not implemented")
}
func (*UnimplementedPostServiceServer) Comment(context.Context, *NewComment) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (*UnimplementedPostServiceServer) MakeReaction(context.Context, *NewReaction) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeReaction not implemented")
}
func (*UnimplementedPostServiceServer) FollowingPosts(context.Context, *GetListOfFollowing) (*PostList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowingPosts not implemented")
}
func (*UnimplementedPostServiceServer) GetUserPosts(context.Context, *UserMailMessage) (*PostList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPosts not implemented")
}
func (*UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}

func RegisterPostServiceServer(s *grpc.Server, srv PostServiceServer) {
	s.RegisterService(&_PostService_serviceDesc, srv)
}

func _PostService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakePostPlusEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreatePost(ctx, req.(*MakePostPlusEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_SavePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).SavePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostService/SavePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).SavePhoto(ctx, req.(*PhotoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_Comment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).Comment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostService/Comment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).Comment(ctx, req.(*NewComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_MakeReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).MakeReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostService/MakeReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).MakeReaction(ctx, req.(*NewReaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_FollowingPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOfFollowing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).FollowingPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostService/FollowingPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).FollowingPosts(ctx, req.(*GetListOfFollowing))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetUserPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMailMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetUserPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostService/GetUserPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetUserPosts(ctx, req.(*UserMailMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "post.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostService_CreatePost_Handler,
		},
		{
			MethodName: "SavePhoto",
			Handler:    _PostService_SavePhoto_Handler,
		},
		{
			MethodName: "Comment",
			Handler:    _PostService_Comment_Handler,
		},
		{
			MethodName: "MakeReaction",
			Handler:    _PostService_MakeReaction_Handler,
		},
		{
			MethodName: "FollowingPosts",
			Handler:    _PostService_FollowingPosts_Handler,
		},
		{
			MethodName: "GetUserPosts",
			Handler:    _PostService_GetUserPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post_service.proto",
}
