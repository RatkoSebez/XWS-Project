// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package follow_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FollowServiceClient is the client API for FollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowServiceClient interface {
	GetFollow(ctx context.Context, in *EmptyEmailMessage, opts ...grpc.CallOption) (*FollowMessage, error)
	CreateFollow(ctx context.Context, in *FollowRequestMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	GetFollowRequest(ctx context.Context, in *EmptyEmailMessage, opts ...grpc.CallOption) (*FollowRequestsMessage, error)
	CreateFollowRequest(ctx context.Context, in *FollowRequestMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type followServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowServiceClient(cc grpc.ClientConnInterface) FollowServiceClient {
	return &followServiceClient{cc}
}

func (c *followServiceClient) GetFollow(ctx context.Context, in *EmptyEmailMessage, opts ...grpc.CallOption) (*FollowMessage, error) {
	out := new(FollowMessage)
	err := c.cc.Invoke(ctx, "/follow.FollowService/GetFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) CreateFollow(ctx context.Context, in *FollowRequestMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/follow.FollowService/CreateFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetFollowRequest(ctx context.Context, in *EmptyEmailMessage, opts ...grpc.CallOption) (*FollowRequestsMessage, error) {
	out := new(FollowRequestsMessage)
	err := c.cc.Invoke(ctx, "/follow.FollowService/GetFollowRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) CreateFollowRequest(ctx context.Context, in *FollowRequestMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/follow.FollowService/CreateFollowRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServiceServer is the server API for FollowService service.
// All implementations must embed UnimplementedFollowServiceServer
// for forward compatibility
type FollowServiceServer interface {
	GetFollow(context.Context, *EmptyEmailMessage) (*FollowMessage, error)
	CreateFollow(context.Context, *FollowRequestMessage) (*EmptyMessage, error)
	GetFollowRequest(context.Context, *EmptyEmailMessage) (*FollowRequestsMessage, error)
	CreateFollowRequest(context.Context, *FollowRequestMessage) (*EmptyMessage, error)
	mustEmbedUnimplementedFollowServiceServer()
}

// UnimplementedFollowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowServiceServer struct {
}

func (*UnimplementedFollowServiceServer) GetFollow(context.Context, *EmptyEmailMessage) (*FollowMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollow not implemented")
}
func (*UnimplementedFollowServiceServer) CreateFollow(context.Context, *FollowRequestMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollow not implemented")
}
func (*UnimplementedFollowServiceServer) GetFollowRequest(context.Context, *EmptyEmailMessage) (*FollowRequestsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowRequest not implemented")
}
func (*UnimplementedFollowServiceServer) CreateFollowRequest(context.Context, *FollowRequestMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollowRequest not implemented")
}
func (*UnimplementedFollowServiceServer) mustEmbedUnimplementedFollowServiceServer() {}

func RegisterFollowServiceServer(s *grpc.Server, srv FollowServiceServer) {
	s.RegisterService(&_FollowService_serviceDesc, srv)
}

func _FollowService_GetFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyEmailMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.FollowService/GetFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFollow(ctx, req.(*EmptyEmailMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_CreateFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).CreateFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.FollowService/CreateFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).CreateFollow(ctx, req.(*FollowRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetFollowRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyEmailMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFollowRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.FollowService/GetFollowRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFollowRequest(ctx, req.(*EmptyEmailMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_CreateFollowRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).CreateFollowRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.FollowService/CreateFollowRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).CreateFollowRequest(ctx, req.(*FollowRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _FollowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "follow.FollowService",
	HandlerType: (*FollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollow",
			Handler:    _FollowService_GetFollow_Handler,
		},
		{
			MethodName: "CreateFollow",
			Handler:    _FollowService_CreateFollow_Handler,
		},
		{
			MethodName: "GetFollowRequest",
			Handler:    _FollowService_GetFollowRequest_Handler,
		},
		{
			MethodName: "CreateFollowRequest",
			Handler:    _FollowService_CreateFollowRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follow_service.proto",
}
