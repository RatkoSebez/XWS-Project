// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package profile_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceClient interface {
	Edit(ctx context.Context, in *ProfileDTO, opts ...grpc.CallOption) (*StatusMessage, error)
	GetProfileByMail(ctx context.Context, in *EmptyMailMessage, opts ...grpc.CallOption) (*ProfileInfo, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) Edit(ctx context.Context, in *ProfileDTO, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/follow.ProfileService/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetProfileByMail(ctx context.Context, in *EmptyMailMessage, opts ...grpc.CallOption) (*ProfileInfo, error) {
	out := new(ProfileInfo)
	err := c.cc.Invoke(ctx, "/follow.ProfileService/GetProfileByMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility
type ProfileServiceServer interface {
	Edit(context.Context, *ProfileDTO) (*StatusMessage, error)
	GetProfileByMail(context.Context, *EmptyMailMessage) (*ProfileInfo, error)
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (*UnimplementedProfileServiceServer) Edit(context.Context, *ProfileDTO) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedProfileServiceServer) GetProfileByMail(context.Context, *EmptyMailMessage) (*ProfileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByMail not implemented")
}
func (*UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}

func RegisterProfileServiceServer(s *grpc.Server, srv ProfileServiceServer) {
	s.RegisterService(&_ProfileService_serviceDesc, srv)
}

func _ProfileService_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.ProfileService/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Edit(ctx, req.(*ProfileDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetProfileByMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMailMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfileByMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.ProfileService/GetProfileByMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfileByMail(ctx, req.(*EmptyMailMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "follow.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Edit",
			Handler:    _ProfileService_Edit_Handler,
		},
		{
			MethodName: "GetProfileByMail",
			Handler:    _ProfileService_GetProfileByMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile_service.proto",
}
